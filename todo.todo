todo:
    ✔ movement @done(25-07-29 21:12)
        ✔ helltaker's feel @done(25-08-01 00:55) kinda feel nice now
        ✔ easing @done(25-08-01 02:05)
        ☐ particle
    ✔ fps counter @done(25-08-01 00:55)
        ✔ why is it 165 fps? try to understand it more @done(25-08-02 23:08) it's monitor refresh rate!
        ☐ fps limiting
    ☐ the mutable and the constant, the refreshable and the initialization
    ☐ naming fatigue!!
        ☐ namespace as rule grouping
    ✔ multiple entities with shared behaviour @done(25-08-02 22:54) I think this can be done already, just design boundary problem
    ✔ somehow we learned vertex shaders @done(25-08-02 22:55)
        ✘ transform @cancelled(25-08-06 22:30) no the term i am thinking of
        ✔ bounce @done(25-08-03 14:17)
        ✔ vertex animation @done(25-08-03 14:17)
    ☐ transform2d
    ☐ scene graph
    ☐ ordered execution
    ☐ text dialogue
    ☐ sound effect
    ☐ music
    ☐ variation in screen size
    ☐ Texture Atlas
    ☐ instanced image
        ☐ background
        ☐ tilemaps, or try out the supported tilemap related libs
            ☐ we tried tiled and have made one but seems using tilesoup is a grand task, defer for now
            ☐ also what's with that macro for slurp hack?
    ☐ the game...

devs:
    ✔ leva receiving data @done(25-07-29 21:13)
    ☐ dependency inversion for engine (everyone supply engine instead)
        ☐ when in doubt-learn from the behemoth https://docs.unity3d.com/6000.0/Documentation/Manual/execution-order.html
    ☐ shadow-cljs error hud at runtime
        ☐ iglu floating point as string 
            ☐ check cljs <-> clj diff https://github.com/jank-lang/clojure-test-suite/blob/bb437118c9713a7a3d5a7f250fdf309b84b388e0/test/clojure/core_test/str.cljc
            ☐ check iglu impl on :number https://github.com/oakes/iglu/blob/68e48f8fd2ac6590b6b43fb071a67c8de8c663ce/src/iglu/glsl.cljc#L109
    ☐ build with tools.build
    ☐ native build
    ✘ flag-like behaviour in rules engine (query-once then delete, potentially YAGNI) @cancelled(25-08-06 22:50)
        ☐ I think the behaviour is already like this, if the rule fire once, it can only be queried once, the fact is not deleted tho
    ✘ bidirectionality (YAGNI alert) @cancelled(25-08-02 23:10) I forgot what this is, leva is already bidirectional

upstream:
    ☐ play-cljc shader compile error when inserting uniform that is not declared inside shader
        ☐ "You must define the uniform in your vertex or fragment shader's :uniforms", better if it says which one that needs defintion
    ☐ iglu floating point