todo:
    ✔ movement @done(25-07-29 21:12)
        ✔ helltaker's feel @done(25-08-01 00:55) kinda feel nice now
        ✔ easing @done(25-08-01 02:05)

    ✔ fps counter @done(25-08-01 00:55)
        ✔ why is it 165 fps? try to understand it more @done(25-08-02 23:08) it's monitor refresh rate!
        ☐ fps limiting

    ✔ the mutable and the constant, the refreshable and the initialization @done(25-08-09 19:01)
    ✔ naming fatigue!! @done(25-08-09 19:01)
        ✔ namespace as rule grouping @done(25-08-09 19:01)
    ✔ multiple entities with shared behaviour @done(25-08-02 22:54) I think this can be done already, just design boundary problem
    ✔ somehow we learned vertex shaders @done(25-08-02 22:55)
        ✘ transform @cancelled(25-08-06 22:30) no the term i am thinking of
            ☐ mesh deformation
        ✔ bounce @done(25-08-03 14:17)
        ✔ vertex animation @done(25-08-03 14:17)

    ✔ refactor needed for resource load ordering and solving text/spritesheet instance error @done(25-09-03 07:15)
        ✘ try cursive @cancelled(25-08-23 12:24) 
        ✔ supply rules to worlds @done(25-08-23 12:23)
        ✔ access to world* atom instead of passing @done(25-08-23 12:24)
        ✔ make spritesheet an instance @done(25-08-23 12:24)
        ✘ implement order and check if texture mixing is still happening @cancelled(25-08-23 12:24) the bug is caused by no :uniforms on instance (see ubim.cljc)
        ✔ crop dialogue manually @done(25-09-03 07:15)
        ✔ dialogue box @done(25-09-03 07:15)

    ☐ Text
        ✔ explore play-cljc.text @done(25-08-21 00:41)
        ✔ hook load logic to rules-engine/assets @done(25-09-03 07:15)
        ✔ represents text assets as esse/asset @done(25-09-03 07:15)
        ☐ dialogues
            ✔ n-patch dialogue box @done(25-09-03 07:14)
            ✔ triggerrable @done(25-09-03 07:14)
            ✔ script @done(25-09-03 07:14)
            ✔ typing text @done(25-09-15 20:59)
            ✔ positions @done(25-09-15 20:59)
            ☐ timeline
        

    ☐ Scenes
        ☐ menu
        ☐ intro
        ☐ chapter1
        ☐ pause
        ☐ overlay menu
        ☐ battle scene??
    
    ☐ Interactable
        ☐ switches
        ✔ pushable @done(25-09-06 09:24)
        ☐ talkable
        ✔ move to another room @done(25-09-15 20:59)

    ☐ tiled maps, advanced
        ✔ multiple areas in one .tmx @done(25-09-15 20:59)
        ✔ map transition @done(25-09-15 20:59)
        ☐ canopy (things that will cover the player), seems to be not trivial
        ☐ animated tiles
        ☐ bushes effect (some patch of bushes in front of player, particles)
        ✔ (actual)Objects layer @done(25-08-20 07:03)
            ✘ turn some objects into esse @cancelled(25-09-03 07:15) manually use the instanced as spritesheet
        ☐ 2d entities employing 3rd dimension


    ☐ particle

    ☐ post-effect
        ☐ learn render to texture
    
    ☐ transform2d
        ☐ scene graph
        ☐ animations
        ☐ transform3d on 2d object and background
            ☐ possible octopath?

    ☐ ordered execution
        ✔ text dialogue @done(25-09-03 07:23)
        ☐ menu -> game

    ☐ sound effect
    ☐ music

    ☐ variation in screen size

    ☐ Texture Atlas

    ✔ instanced image @done(25-09-03 07:23)
        ✘ background @cancelled(25-09-03 07:23) tiledmap will do
        ✔ tilemaps, or try out the supported tilemap related libs @done(25-08-12 04:15)
            ✔ we tried tiled and have made one but seems using tilesoup is a grand task, defer for now @done(25-08-12 04:15)
            ✔ also what's with that macro for slurp hack? @done(25-08-12 04:15) so it is compile-time stuff'
       

    ☐ Helltaker


dont solve future problems:
    ☐ room defined in program should match the boundaries set from tiled editor. dont programmatically solve this.

idiosyncracies:
    ☐ the x y definition is not consistent, sometimes it is x y, sometimes it is pos2d, sometimes it is absolute pixel size, sometimes it is grid coordinates

bugs:
    ☐ multiple input keys at once (movement arrow up and left for example)
    ☐ if you hold move keys while entering doors, it will have delay until the players moves rooom
    ✔ tiles sometimes rendered in wrong order @done(25-09-15 20:54) I think this is largely solved by render-fn ordering from all-systems
    ✔ still not sure what happen if a layer is using more than one tileset @done(25-09-15 20:55) no problem with this for now, maybe until we need canopy layers
    ☐ sometimes inputs are not responsive the first seconds interacting with the game
    ☐ the animation sometimes "slides", still feel jaggy at times
    ✔ rendering order in jvm is different @done(25-09-15 20:56) I think this is also solved by render-fn
    ✘ instances/assoc (seemingly) blows up js call stack when nulls are passed. need triage @cancelled(25-09-06 10:17)
        ✘ I think not instance, it seems inserting value with invalid spec blows up js stack @cancelled(25-09-06 10:17)
            ✔ is my log-once fn that blows up the stack, it tries to print game map full of atom (I think that's what caused it) @done(25-09-06 10:18)
    ☐ retraction is more expensive on jvm than on js (see 6ecedbae90d7ab0568f06ff9990a2c06d6a59243)
    ☐ leaky pixel on object from tiledmap (tiledmap not relevant i think)
    ✔ code still actually does not know when ubim is :idle @done(25-09-14 13:28) or maybe it does know
        ☐ plus jvm and js difference on room loading


devs:
    ✔ leva receiving data @done(25-07-29 21:13)
    ✘ dependency inversion for engine (everyone supply engine instead) @cancelled(25-08-12 04:18)
        ✔ or maybe make engine define all its deps, decoupling whatever it is in world @done(25-09-03 07:17)
        ✘ when in doubt-learn from the behemoth https://docs.unity3d.com/6000.0/Documentation/Manual/execution-order.html @cancelled(25-08-12 04:19) nah, too complex for now
    ✔ shadow-cljs error hud at runtime @done(25-08-09 19:02)

    ✔ build with tools.build @done(25-08-12 04:17) kinda done, will tidy up as we go
        ✔ native build @done(25-09-03 07:17)
    ✘ flag-like behaviour in rules engine (query-once then delete, potentially YAGNI) @cancelled(25-08-06 22:50)
        ✔ I think the behaviour is already like this, if the rule fire once, it can only be queried once, the fact is not deleted tho @done(25-09-03 07:26)
    ✘ bidirectionality (YAGNI alert) @cancelled(25-08-02 23:10) I forgot what this is, leva is already bidirectional
    ✔ somehow we integrated imgui in jvm side @done(25-08-12 04:23)
        ✔ make fps counter in java side @done(25-09-03 07:26)

    ☐ try vybes and maybe flecs if we can incorporate rules engine or our 2d stuff (https://github.com/pfeodrippe/vybe)
    ✔ that spritesheet file is just images with metadata @done(25-09-13 10:43) not sure what this is actually

    ✔ profile memory @done(25-09-13 10:44) 
        ☐ some prelim check with browser inspector, memory tab. heap size in dev build around > 130mb at first and keep rising to around 400mb and then drop to 80mb (why?), prod build around 20mbs 
    ☐ explore graalvm...👀?
    ✔ moves cljs dev to src-dev-js @done(25-09-13 10:43)

    ☐ error loses its stack trace most of the time but somehow if we 1. hot-reload the error origin 2. not catch them 3. browser will get the stack trace
    


upstream:
    ☐ play-cljc shader compile error when inserting uniform that is not declared inside shader
        ☐ "You must define the uniform in your vertex or fragment shader's :uniforms", better if it says which one that needs defintion
    ☐ odoyle error "Insert must conform ..." something but it doesn't say which insert or what spec it fails
    ☐ iglu floating point as string 
        ☐ start discussion in github issue?
        ☐ check cljs <-> clj diff https://github.com/jank-lang/clojure-test-suite/blob/bb437118c9713a7a3d5a7f250fdf309b84b388e0/test/clojure/core_test/str.cljc
        ☐ check iglu impl on :number https://github.com/oakes/iglu/blob/68e48f8fd2ac6590b6b43fb071a67c8de8c663ce/src/iglu/glsl.cljc#L109
    ☐ tiled-soup for newer version of tiled
    ☐ more performant chars/assoc-char for play-cljc-example (1d7afacbb7754fe16c1f59daae57973bd4631681), still has a bit that can be improved
